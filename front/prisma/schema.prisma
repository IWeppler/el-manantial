generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- MODELOS DE USUARIO Y STOCK ---
enum Role {
  USER
  ADMIN
}

model User {
  id             String   @id @default(cuid())
  name           String
  phone          String   @unique
  address        String?
  role           Role     @default(USER)
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relaciones existentes y nuevas
  orders         Order[]
  eggProductions EggProduction[] 
  expenses       Expense[]
}

model Stock {
  id         String   @id @default(cuid())
  mapleCount Int      @default(0)
  updatedAt  DateTime @updatedAt
}

// --- MODELOS DE CONFIGURACIÓN DEL NEGOCIO ---
model Settings {
  id                    String      @id @default(cuid())
  // --- Precios y Pedidos ---
  pricePerMaple         Int
  pricePerHalfDozen     Int?       
  deliveryFee           Int         @default(0)
  freeDeliveryThreshold Int?
  minimumOrderMaples    Int         @default(1)
  
  priceTiers            PriceTier[]

  // --- Información del Negocio ---
  businessName          String?
  whatsappNumber        String?
  pickupAddress         String?
}

model PriceTier {
  id          String   @id @default(cuid())
  minQuantity Int      // Cantidad mínima de maples para aplicar el precio
  price       Int      // Precio por maple en este nivel
  
  settings    Settings @relation(fields: [settingsId], references: [id])
  settingsId  String
}

enum ScheduleType {
  DELIVERY
  PICKUP
}

model Schedule {
  id        String       @id @default(cuid())
  dayOfWeek String 
  startTime String 
  endTime   String
  type      ScheduleType 
  isActive  Boolean      @default(true) 
  orders    Order[]
}

// --- MODELOS PARA MÉTRICAS DEL NEGOCIO ---
enum ExpenseCategory {
  ALIMENTO
  TRANSPORTE
  MANTENIMIENTO
  INSUMOS // (ej: cajas, productos de limpieza)
  OTROS
}

// Modelo para registrar gastos (actualizado)
model Expense {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  description String
  amount      Int
  
  category    ExpenseCategory

  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

// Modelo para métricas de producción
model EggProduction {
  id       String   @id @default(cuid())
  date     DateTime @db.Date
  quantity Int
  
  user     User     @relation(fields: [userId], references: [id])
  userId   String
}


// --- MODELOS DE ÓRDENES ---
enum PaymentMethod {
  CASH
  TRANSFER
}

enum OrderStatus {
  PENDIENTE
  CONFIRMADO
  ENTREGADO
  CANCELADO
}

model Order {
  id            String        @id @default(cuid())
  mapleQuantity Int 
  totalPrice    Int
  guestName     String?
  guestPhone    String?
  guestAddress  String?
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?
  schedule      Schedule      @relation(fields: [scheduleId], references: [id])
  scheduleId    String
  paymentMethod PaymentMethod
  status        OrderStatus   @default(PENDIENTE)
  orderDate     DateTime      @default(now())
}